// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  userName  String   @unique
  email     String?  @unique
  password  String
  roleId    String
  status    Boolean  @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())

  role      Role     @relation("UserRole",fields:[roleId], references: [id])
  profile   Profile?  @relation("UserProfile")
  Coach    CoachOnCenter? // Single relation field for one coach in one center
  @@index([roleId])
}

model Role {
  id        String   @id @default(uuid())
  roleName  String   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())

  users   User[]     @relation("UserRole")

}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  firstName  String  
  lastName  String
  nationality  String
  gender  Gender
  phone     String?  @unique
  bio       String?
  avatarId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  user        User     @relation("UserProfile",fields: [userId], references: [id])
  @@index([userId])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Site {
  id        String   @id @default(uuid())
  name      String   @unique
  province  String
  district  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  player    Player[] @relation("PlayerSite")
  coaches   CoachOnCenter[]
}

model Player {
  id        String   @id @default(uuid())
  firstName  String  
  lastName  String
  height  Float
  weight  Float
  foot  String
  nationality  String
  acadStatus  String
  dob       DateTime
  gender       String
  siteId        String

  site    Site  @relation("PlayerSite",fields:[siteId],references:[id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  @@index([siteId])
}

model CoachOnCenter {
  id       String      @id @default(uuid())
  userId   String
  siteId   String

  user     User     @relation(fields: [userId], references: [id])
  center   Site     @relation(fields: [siteId], references: [id])
  @@unique([userId]) // ensure a coach can only belong to one center
}