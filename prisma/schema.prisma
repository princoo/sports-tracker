// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  userName  String   @unique
  email     String?  @unique
  password  String
  roleId    String
  status    Boolean  @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())

  role      Role     @relation("UserRole",fields:[roleId], references: [id])
  profile   Profile?  @relation("UserProfile")
  Coach    CoachOnCenter? // Single relation field for one coach in one center
  testsRecorded  PlayerTest[] @relation("testsRecorded")
  @@index([roleId])
}

model Role {
  id        String   @id @default(uuid())
  roleName  String   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())

  users   User[]     @relation("UserRole")

}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  firstName  String  
  lastName  String
  nationality  String
  gender  Gender
  phone     String?  @unique
  bio       String?
  avatarId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  user        User     @relation("UserProfile",fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Site {
  id        String   @id @default(uuid())
  name      String   @unique
  province  String
  district  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  player    Player[] @relation("PlayerSite")
  coaches   CoachOnCenter[]
}

model Player {
  id        String   @id @default(uuid())
  firstName  String  
  lastName  String
  age     Float
  height  Float
  weight  Float
  foot  String
  nationality  String
  acadStatus  String
  dob       DateTime
  gender       String
  positions    String[]
  siteId        String

  site    Site  @relation("PlayerSite",fields:[siteId],references:[id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  testRecords   PlayerTest[]  @relation("testRecords")

  @@index([siteId])
}

model CoachOnCenter {
  id       String      @id @default(uuid())
  userId   String
  siteId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  center   Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  @@unique([userId]) // ensure a coach can only belong to one center
}

model Test {
  id       String      @id @default(uuid())
  name   String @unique
  description   String
  requiredMetrics String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  testResults PlayerTest[] @relation("testResults")
  sessions    SessionTests[] @relation("tests")

}

model TestSession {
  id     String      @id @default(uuid())
  date   DateTime
  isActive Boolean
  status   SessionStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  tests       SessionTests[] @relation("testSessions")
  testResults PlayerTest[] @relation("sessionResults")
}
enum SessionStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
}

model SessionTests {
  id     String      @id @default(uuid())
  sessionId   String
  testId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  session     TestSession   @relation("testSessions",fields: [sessionId], references: [id], onDelete: Cascade)
  test        Test   @relation("tests",fields: [testId], references: [id], onDelete: Cascade)
}

model PlayerTest {
  id          String   @id @default(uuid())
  playerId    String
  testId      String
  sessionId   String
  recorderBy  String
  recordedAt  DateTime @default(now())
  results     Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  player      Player   @relation("testRecords",fields: [playerId], references: [id], onDelete: Cascade)
  test        Test     @relation("testResults",fields: [testId], references: [id], onDelete: Cascade)
  user        User     @relation("testsRecorded",fields: [recorderBy], references: [id])
  testSession TestSession     @relation("sessionResults",fields: [sessionId], references: [id], onDelete: Cascade)
  metrics     TestMetrics[] @relation("playerTestMetrics")

  @@index([playerId, testId])
}

enum Foot {
  LEFT
  RIGHT
  BOTH
}

model TestMetrics {
  id       String      @id @default(uuid())
  playerTestId   String
  accuracy Float?
  bodyPosition  Float?
  totalTime     Float?
  Attempts      Int?
  successes     Int?
  power         Float?
  conesTouched  Int?
  foot      Foot?
  errors        Int?
  distance      Float?
  ballControll Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  playerTest        PlayerTest     @relation("playerTestMetrics",fields: [playerTestId], references: [id], onDelete: Cascade)
  @@index([playerTestId])
}